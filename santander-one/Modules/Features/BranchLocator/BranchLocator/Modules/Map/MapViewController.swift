//
//  MapViewController.swift
//  LocatorApp
//
//  Created Ivan Cabezon on 22/8/18.
//  Copyright © 2018 Globile. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import MapKit

// MARK: View -

protocol MapViewProtocol: class {
    var mapView: MKMapView! { get set }
    var viewIsShown: Bool { get set }
    
    func userMovedMap()
    
    func calculateRegionAndCenter(coordinates: [CLLocationCoordinate2D])
    func calculateRegionAndCenterWithCompletion(coordinates: [CLLocationCoordinate2D], completion: (() -> Void)?)
    
    func removeRouteAndDismissPOIDetailViewController()
    
    func deselectPin(with selectedAnnotation: POIAnnotation)
    
    func mapView(didAdd views: [MKAnnotationView])
    func changeRegion(to region: MKCoordinateRegion, animated: Bool )
    
    func isSearchAgainButtonHidden() -> Bool
    
    func configureUI()
    func dismissTextField()
    
    func configureTextField(with text: String?)
    
    func showRoute(_ response: MKDirections.Response)
    func removeRoute()
    func addReferenceAnnotation(with coordinate: CLLocationCoordinate2D, title: String)
    func showSearchAgainButton()
    func hideSearchAgainButton()
    //    func showSpinner()
    //    func hideSpinner()
    
    func textFieldDidBeginEditing()
    func setSearchTextField(value: String)
    func reloadSearchTableView()
    func setSearchTableViewHeight(_ value: CGFloat)
    
    func showToast(withText text: String, andDuration duration: Double, inPosition position: ToastPosition, image img: UIImage?)
    
    func openFilter(_ sender: Any)
    
    func locationMapButtonDisabled()
    func locationMapButtonEnabled()
    
    func showMap()
    func showList()
    
    func getListTableView() -> UITableView
    func getTabBarView() -> DetailButtonsSectionTableView?
    
    func getSearchBarContainerY() -> (viewHeight: CGFloat, searchBarContainerY: CGFloat)
    
    func getSearchBarTextFieldText() -> String
}

private let kTableViewAnimationDuration = 0.35
private let kSideMargin: CGFloat = 10
private let kZoomInKms: Double = 1
private let kBasicInfoAnimationDuration: TimeInterval = 0.35
private let kSearchAgainFadeInDuration: TimeInterval = 0.3
// swiftlint:disable type_body_length
public class MapViewController: UIViewController, MapViewProtocol, View {
    // swiftlint:enable type_body_length
    
    @IBOutlet var tabBarContainerView: UIView!
    @IBOutlet var mapContainerView: UIView!
    @IBOutlet var listContainerView: UIView!
    @IBOutlet var listTableView: UITableView!
    @IBOutlet weak var searchContainerView: UIView!
    @IBOutlet var searchStackView: UIStackView!
    @IBOutlet weak var searchTextField: UITextField!
    @IBOutlet weak var searchTextFieldStackView: UIStackView!
    @IBOutlet weak var leftSearchTextFieldView: UIView!
    @IBOutlet weak var rightSearchTextFieldView: UIView!
    @IBOutlet var counterView: UIView!
    @IBOutlet var counterLabel: UILabel!
    @IBOutlet weak var mapView: MKMapView!
    @IBOutlet weak var searchResultsTableView: UITableView!
    @IBOutlet weak var tableViewHeightConstraint: NSLayoutConstraint!
    @IBOutlet weak var locationMapButton: UIButton!
    @IBOutlet weak var filterButton: UIButton!
    @IBOutlet var filterContainerView: UIView!
    @IBOutlet var filterIconButton: UIButton! {
        didSet{
            filterIconButton.setImage(UIImage(resourceName: "filter"), for: .normal)
            filterIconButton.imageView?.contentMode = .scaleAspectFit
            filterIconButton.tintColor = MapViewControllerThemeColor.filterIcon.value
        }
    }
    
    
    
    //    @IBOutlet weak var horizontalFiltersCollectionView: UICollectionView!
    //    @IBOutlet weak var filtersPlaceHolder: UILabel!
    //    @IBOutlet weak var arrowButton: UIButton!
    //    @IBOutlet weak var cancelButton: UIButton!
    //    @IBOutlet var cancelButtonWidthConstraint: NSLayoutConstraint!
    //    @IBOutlet var filterIcon: UIImageView!
    
    //    @IBOutlet weak var separatorView: UIView!
    //    @IBOutlet weak var spinnerView: UIImageView!
    
    private var searchContainerShadowLayer: CAShapeLayer!
    private var aimShadowLayer: CAShapeLayer!
    
    var presenter: MapPresenterProtocol?
    var shouldShowTitle = true
    var viewIsShown = true
    var filterEnabled = true
    
    override public func viewDidLoad() {
        super.viewDidLoad()
        if shouldShowTitle {
            //title = localizedString("bl_braches_and_atms")
            addNavBarImage(imageName: "titleBar", navigationItem: navigationItem)
        }
        if #available(iOS 11.0, *) {
            mapView.register(ClusterView.self, forAnnotationViewWithReuseIdentifier: MKMapViewDefaultClusterAnnotationViewReuseIdentifier)
        } else {
            // Fallback on earlier versions
        }
        self.configureUI()
    }
    
    deinit { print("deinit \(self)") }
    
    override public func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(true)
        viewIsShown = true
        mapView.delegate = presenter
        
        //        horizontalFiltersCollectionView.reloadData()
        //    horizontalFiltersCollectionView.layoutIfNeeded()
        
        guard let hasFiltersApplied = presenter?.hasFiltersApplied() else { return }
        if hasFiltersApplied {
            guard let filterCount = presenter?.getSelectedFilters() else {return}
            showFilterCounter(count: filterCount.count)
        } else {
            counterView.isHidden = true
            filterIconButton.isHidden = false
        }
        //  ANALYTICS REMOVED
//        BLAnalyticsHandler.track(event: .homeView, screenName: BlEvent.homeView.rawValue, isScreen: true)
    }
    
    public override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        self.navigationController?.interactivePopGestureRecognizer?.delegate = self
        presenter?.viewDidAppear()
    }
    
    public override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        self.mapView.delegate = nil
        viewIsShown = false
        removeRouteAndDismissPOIDetailViewController()
    }
    
    public override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        
        //checkIfArrowShouldBeHidden()
        
        dropShadows()
        roundCorners()
    }
    
    func showFilterCounter(count: Int){
        filterIconButton.isHidden = true
        counterView.isHidden = false
        counterLabel.text = "\(count)"
        counterLabel.textColor = .white
        counterLabel.font = .santander(family: .text, type: .regular, size: 16)
        counterView.layer.cornerRadius = 11
        counterView.layer.masksToBounds = true
        counterView.layer.backgroundColor = UIColor.santanderRed.cgColor
        counterView.layer.borderColor = UIColor.santanderRed.cgColor
    }
    
    func getSearchBarContainerY() -> (viewHeight: CGFloat, searchBarContainerY: CGFloat) {
        
        let frame = searchContainerView.frame.maxY + searchContainerView.frame.height
        let viewHeight = view.frame.height
        return (viewHeight,frame)
    }
    
    
    func showToast(withText text: String, andDuration duration: Double, inPosition position: ToastPosition, image img: UIImage? ) {
        view.hideAllToasts()
        view.makeToast(text, duration: duration, position: position, image: img, style: configureToast())
    }
    
    func configureToast() -> ToastStyle {
        var style = ToastStyle()
        style.cornerRadius = 10.0
        style.messageFont = .santander(family: .text, type: .regular, size: 14)
        style.messageColor = .white
        style.backgroundColor = .lisboaGray
        style.horizontalPadding = 16.0
        style.verticalPadding = 8.0
        style.maxWidthPercentage = (100 - (4800 / UIScreen.main.bounds.width)) / 100
        style.displayShadow = true
        style.shadowRadius = 8.0
        style.shadowOpacity = 0.5
        style.shadowOffset = CGSize(width: 0, height: 3)
        style.shadowColor = UIColor.black
        style.imageSize = CGSize(width: 20, height: 20)
        
        return style
    }
    
    func roundCorners() {
        // rounded corners for search container
        leftSearchTextFieldView.round(corners: [.topLeft, .bottomLeft], radius: 4)
        filterContainerView.round(corners: [.topRight, .bottomRight], radius: 4)
        filterContainerView.layer.masksToBounds = true
        leftSearchTextFieldView.layer.masksToBounds = true
    }
    
    func dropShadows() {
        let shadowOpacity: Float = 0.2
        
        // Aim button
        self.aimShadowLayer?.removeFromSuperlayer()
        let aimShadowLayer = CAShapeLayer()
        aimShadowLayer.path = UIBezierPath(roundedRect: locationMapButton.bounds, cornerRadius: 4).cgPath
        aimShadowLayer.fillColor = UIColor.white.cgColor
        aimShadowLayer.shadowColor = UIColor.darkGray.cgColor
        aimShadowLayer.shadowOpacity = shadowOpacity
        aimShadowLayer.shadowOffset = CGSize(width: 0.1, height: 0.1)
        aimShadowLayer.shadowRadius = locationMapButton.frame.height / 2
        aimShadowLayer.shadowPath = UIBezierPath(rect: locationMapButton.bounds).cgPath
        locationMapButton.layer.insertSublayer(aimShadowLayer, at: 0)
        self.aimShadowLayer = aimShadowLayer
        
        // searchContainerView
        searchContainerView.dropShadow()
    }
    
    func configureUI() {
        let titleView = loadCustomTitleView()
        self.navigationItem.titleView = titleView
        listContainerView.alpha = 0.0
        listContainerView.backgroundColor = .white
        
        let bundle = Bundle(for: MapViewController.self)
        if let view = bundle.branchLocatorBundle?.loadNibNamed("DetailButtonsSectionTableView", owner: self, options: nil)?.first as? DetailButtonsSectionTableView {
            view.leftLabel.text = localizedString("bl_map_tab")
            view.rightLabel.text = localizedString("bl_list_tab")
            view.leftUnderlineView.backgroundColor = .santanderRed
            view.rightUnderlineView.backgroundColor = .santanderRed
            view.delegate = self
            view.configureView(main: true)
            view.topSeperatorView.isHidden = true
            tabBarContainerView.addSubview(view)
            
            //TODO: add constraints to hold right
            view.translatesAutoresizingMaskIntoConstraints = false
            view.trailingAnchor.constraint(equalTo: tabBarContainerView.trailingAnchor).isActive = true
            view.leadingAnchor.constraint(equalTo: tabBarContainerView.leadingAnchor).isActive = true
            view.topAnchor.constraint(equalTo: tabBarContainerView.topAnchor).isActive = true
            view.bottomAnchor.constraint(equalTo: tabBarContainerView.bottomAnchor).isActive = true
            
        }
        
        locationMapButton.setImage(UIImage(resourceName: "geoposition_icon"), for: .normal)
        
        searchResultsTableView.register(UINib.init(nibName: SearchResultTableViewCell.nibString(), bundle: bundle.branchLocatorBundle), forCellReuseIdentifier: SearchResultTableViewCell.nibString())
        searchResultsTableView.translatesAutoresizingMaskIntoConstraints = false
        
        leftSearchTextFieldView.backgroundColor = .white
        rightSearchTextFieldView.backgroundColor = .white
        filterContainerView.backgroundColor = .white
        searchTextField.clearButtonMode = .whileEditing
        searchTextField.backgroundColor = .white
        
        
        searchTextField.delegate = presenter
        // swiftlint:disable colon
        let attrString = NSAttributedString(string: localizedString("bl_search_placeholder"),
                                            attributes: [NSAttributedString.Key.foregroundColor : MapViewControllerThemeColor.searchAgainButtonUnselected.value])
        // swiftlint:enable colon
        searchTextField.attributedPlaceholder = attrString
        searchTextField.leftViewMode = .always
        searchTextField.rightViewMode = .always
        
        searchResultsTableView.layer.borderWidth = 1
        searchResultsTableView.layer.borderColor = MapViewControllerThemeColor.searchAgainButtonUnselected.value.cgColor
        searchResultsTableView.layer.cornerRadius = 4
        searchResultsTableView.layer.masksToBounds = true
        searchResultsTableView.delegate = presenter
        searchResultsTableView.dataSource = presenter
        
        //        searchAgainButton.setTitle(localizedString("bl_search_in_this_place"), for: .normal)
        //        searchAgainButton.setBackgroundColor(UIColor.clear, forState: .normal)
        //        searchAgainButton.setTitleColor(UIColor.red, for: .normal)
        //        searchAgainButton.titleLabel?.font = UIFont.san_openSansRegular(ofSize: 14)
        //        searchAgainButton.alpha = 0.0
        
        createSearchBarImages()
        
        // let spImg = UIImage.bl_gif(name: "BS_loader")
        //spinnerView.image = spImg
        //spinnerView.isHidden = true
        
        
        // swiftlint:disable colon
        let buttonFilterAttrString = NSAttributedString(string: localizedString("bl_filter_title"),
                                                        attributes: [NSAttributedString.Key.foregroundColor : MapViewControllerThemeColor.buttonFilterAttrString.value,
                                                                     NSAttributedString.Key.font : MapViewControllerThemeFont.buttonFilterAttrString.value])
        // swiftlint:enable colon
        
        
        let tapGesture = UITapGestureRecognizer.init(target: self, action:#selector(openFilter(_:)))
        filterContainerView.addGestureRecognizer(tapGesture)
        
        filterButton.setAttributedTitle(buttonFilterAttrString, for: .normal)
        
        //horizontalFiltersCollectionView.delegate = self
        //horizontalFiltersCollectionView.dataSource = self
        //horizontalFiltersCollectionView.register(UINib.init(nibName: "BoxFilterCollectionViewCell", bundle: bundle), forCellWithReuseIdentifier: "BoxFilterCellID")
        //horizontalFiltersCollectionView.reloadData()
        
        //MKAnnotationView.appearance().tintColor = UIColor.red
        
        mapView.isRotateEnabled = false
        mapView.delegate = presenter
        
        let geoPositionImage = (UIImage(resourceName: "geoposition_icon") ?? UIImage()).withRenderingMode(.alwaysTemplate)
        locationMapButton.setImage(geoPositionImage, for: .normal)
        locationMapButton.backgroundColor = .white
        locationMapButton.layer.cornerRadius = 4
        locationMapButton.tintColor = .lisboaGray
        
        let panGesture = UIPanGestureRecognizer(target: self, action: #selector(userMovedMap))
        panGesture.delegate = self
        mapView.addGestureRecognizer(panGesture)
        
        checkLocationPermission()
        
        listTableView.register(UINib.init(nibName: MapListTableViewCell.nibString(), bundle: bundle.branchLocatorBundle), forCellReuseIdentifier: MapListTableViewCell.nibString())
        listTableView.backgroundColor = UIColor.lightGray
        listTableView.delegate = presenter
        listTableView.dataSource = presenter
        listTableView.backgroundColor = .white
        
        NotificationCenter.default.addObserver(self, selector: #selector(checkLocationPermission), name: .checkForLocationPermission, object: nil)
        
        toggleFilterContainerVisibility()
    }
    
    func createSearchBarImages() {
        let bundle = Bundle(for: MapViewController.self).branchLocatorBundle
        
        if let glassImage = UIImage(named: "searchGlass", in: bundle, compatibleWith: nil) {
            let searchImgView = UIButton(frame: CGRect(x: 20, y: 0, width: 24, height: 24))
            searchImgView.setTitle("", for: .normal)
            searchImgView.setImage(glassImage, for: .normal)
            searchImgView.contentMode = .scaleAspectFit
            searchImgView.tintColor = MapViewControllerThemeColor.iconColors.value
            
            searchImgView.addTarget(self, action: #selector(searchFromGlass), for: .touchUpInside)
            
            self.leftSearchTextFieldView.addSubview(searchImgView)
            
            searchImgView.translatesAutoresizingMaskIntoConstraints = false
            let horizontalConstraint = searchImgView.centerXAnchor.constraint(equalTo: leftSearchTextFieldView.centerXAnchor)
            let verticalConstraint = searchImgView.centerYAnchor.constraint(equalTo: leftSearchTextFieldView.centerYAnchor)
            let widthConstraint = searchImgView.widthAnchor.constraint(equalToConstant: 20)
            let heightConstraint = searchImgView.heightAnchor.constraint(equalToConstant: 20)
            self.leftSearchTextFieldView.addConstraints([horizontalConstraint, verticalConstraint, widthConstraint, heightConstraint])
            NSLayoutConstraint.activate([horizontalConstraint, verticalConstraint, widthConstraint, heightConstraint])
        }
        
        if let pointerImage = UIImage(named: "pointer", in: bundle, compatibleWith: nil) {
            let searchImgView = UIButton(frame: CGRect(x: 20, y: 0, width: 24, height: 24))
            searchImgView.setTitle("", for: .normal)
            searchImgView.setImage(pointerImage, for: .normal)
            searchImgView.contentMode = .scaleAspectFit
            searchImgView.tintColor = MapViewControllerThemeColor.iconColors.value
            searchImgView.addTarget(self, action: #selector(searchAgainAction), for: .touchUpInside)
            self.rightSearchTextFieldView.addSubview(searchImgView)
            
            searchImgView.translatesAutoresizingMaskIntoConstraints = false
            let horizontalConstraint = searchImgView.centerXAnchor.constraint(equalTo: rightSearchTextFieldView.centerXAnchor)
            let verticalConstraint = searchImgView.centerYAnchor.constraint(equalTo: rightSearchTextFieldView.centerYAnchor)
            let widthConstraint = searchImgView.widthAnchor.constraint(equalToConstant: 20)
            let heightConstraint = searchImgView.heightAnchor.constraint(equalToConstant: 20)
            self.rightSearchTextFieldView.addConstraints([horizontalConstraint, verticalConstraint, widthConstraint, heightConstraint])
            NSLayoutConstraint.activate([horizontalConstraint, verticalConstraint, widthConstraint, heightConstraint])
        }
    }
    
    //    func checkIfArrowShouldBeHidden() {
    //        let collectionWidth = horizontalFiltersCollectionView.frame.size.width
    //        let collectionContentSizeWidth = horizontalFiltersCollectionView.contentSize.width
    //        if collectionWidth > collectionContentSizeWidth {
    //            arrowButton.isHidden = true
    //        } else {
    //            arrowButton.isHidden = false
    //        }
    //    }
    
    @objc func checkLocationPermission() {
        let status = CLLocationManager.authorizationStatus()
        
        switch status {
        case .authorizedAlways, .authorizedWhenInUse:
            presenter?.locationManager.startUpdatingLocation()
            locationMapButton.tintColor = MapViewControllerThemeColor.locationMapButtonWhenInUse.value
            locationMapButton.isEnabled = true
        //MKAnnotationView.appearance().tintColor = UIColor.red
        case .notDetermined, .restricted:
            presenter?.locationManager.requestWhenInUseAuthorization()
            locationMapButton.tintColor = MapViewControllerThemeColor.locationMapButtonNotDetermined.value
            locationMapButton.isEnabled = true
        case .denied:
            locationMapButton.isEnabled = false
            presentAlert(title: localizedString("bl_permission"),
                         message: localizedString("bl_gps_locate_you"),
                         acceptTitle: localizedString("bl_cancel"),
                         acceptCompletion: nil,
                         cancelTitle: localizedString("bl_go_to_settings"),
                         cancelCompletion: { _, _ in
                            if let url = URL(string: UIApplication.openSettingsURLString) {
                                if self.presenter?.canOpenURL(url: url) ?? false {
                                    self.presenter?.openURL(url: url)
                                }
                            }
            }, isDestructive: false, viewController: self)
        }
    }
    
    func dismissTextField() {
        //    cancelButton.contentEdgeInsets = UIEdgeInsets.zero
        //cancelButton.isHidden = true
        //    cancelButtonWidthConstraint.isActive = true
        searchTextField.resignFirstResponder()
        searchTextField.text = ""
        //presenter?.clearMatchingItems()
        self.view.layoutIfNeeded()
        
        UIView.animate(withDuration: kTableViewAnimationDuration, delay: 0.1, options: .curveEaseInOut, animations: {
            //    self.cancelButton.setTitle("", for: .normal)
            
            self.tableViewHeightConstraint.constant = 0
            
            self.view.layoutIfNeeded()
        })
    }
    
    func removeRouteAndDismissPOIDetailViewController() {
        removeRoute()
        presenter?.detailVC?.dismiss(animated: false, completion: {
            self.navigationItem.backBarButtonItem = UIBarButtonItem(title: "", style: .plain, target: nil, action: nil)
        })
    }
    
    func addReferenceAnnotation(with coordinate: CLLocationCoordinate2D, title: String) {
        mapView.addAnnotation(ReferencePoint(coord: coordinate, title: title))
    }
    
    func showSearchAgainButton() {
        self.searchTextField.isUserInteractionEnabled = true
        UIView.animate(withDuration: kSearchAgainFadeInDuration) {
            self.searchTextField.rightView?.alpha = 1.0
        }
    }
    
    func hideSearchAgainButton() {
        self.searchTextField.isUserInteractionEnabled = true
        UIView.animate(withDuration: kSearchAgainFadeInDuration) {
            self.searchTextField.rightView?.alpha = 0.0
        }
    }
    
    func showRoute(_ response: MKDirections.Response) {
        for route in response.routes {
            mapView.addOverlay(route.polyline, level: MKOverlayLevel.aboveRoads)
        }
    }
    
    func removeRoute() {
        if mapView.overlays.count > 0 {
            mapView.removeOverlays(mapView.overlays)
        }
    }
    
    func configureTextField(with text: String?) {
        searchTextField.text = text
    }
    
    @objc func searchAgainAction(_ sender: Any) {
        if presenter?.userWantHisLocation == false{
            presenter?.userWantHisLocation = true
            hideSearchAgainButton()
            presenter?.removeAllAnnotationsFromMap()
            presenter?.comeFromFilters = false
            presenter?.getNearPOIs(to: mapView.centerCoordinate)
            presenter?.clearMatchingItems()
            presenter?.trackSearchAgain()
            searchTextField.text = ""
        }
    }
    
    
    
    func textFieldDidBeginEditing() {
        //  ANALYTICS REMOVED
//        BLAnalyticsHandler.track(event: .tapSearchBar,
//                                 screenName: BlEvent.searchView.rawValue,
//                                 with: [BlKeys.eventAction.rawValue:BlEvent.tapSearchBar.rawValue],
//                                 isScreen: false)
        
        UIView.animate(withDuration: kTableViewAnimationDuration, delay: 0, options: .curveEaseInOut, animations: {
            //self.cancelButton.setTitle(localizedString("bl_cancel"), for: .normal)
            //self.cancelButton.contentEdgeInsets = UIEdgeInsets(top: 0, left: 10, bottom: 0, right: 10)
            //self.cancelButton.isHidden = false
            //    self.cancelButtonWidthConstraint.isActive = false
            self.view.layoutIfNeeded()
        })
    }
    
    func setSearchTextField(value: String) {
        self.searchTextField.text = value
    }
    
    @objc func searchFromGlass() {
        if searchTextField.isFirstResponder {
            dismissTextField()
        } else {
            searchTextField.becomeFirstResponder()
        }
    }
    
    //    func showSpinner() {
    //        spinnerView.isHidden = false
    //    }
    //    func hideSpinner() {
    //        spinnerView.isHidden = true
    //    }
    
    func reloadSearchTableView() {
        searchResultsTableView.reloadData()
        //checkIfArrowShouldBeHidden()
    }
    
    func setSearchTableViewHeight(_ value: CGFloat) {
        self.tableViewHeightConstraint.constant = value
    }
    
    func deselectPin(with selectedAnnotation: POIAnnotation) {
        removeRoute()
        mapView.deselectAnnotation(selectedAnnotation, animated: true)
    }
    
    func calculateRegionAndCenter(coordinates: [CLLocationCoordinate2D]) {
        if coordinates.count == 0 {
            return
        }
        let maxLatitude = coordinates.max(by: {$0.latitude < $1.latitude})?.latitude
        let minLatitude = coordinates.max(by: {$0.latitude > $1.latitude})?.latitude
        let maxLongitude = coordinates.max(by: {$0.longitude < $1.longitude})?.longitude
        let minLongitude = coordinates.max(by: {$0.longitude > $1.longitude})?.longitude
        
        let center: CLLocationCoordinate2D = CLLocationCoordinate2DMake((maxLatitude! + minLatitude!) / 2, (maxLongitude! + minLongitude!) / 2)
        self.mapView.centerCoordinate = center
        
        let centerLocation = CLLocation(latitude: center.latitude, longitude: center.longitude)
        //get distance between map center and far point
        var distance = Double(coordinates.map({centerLocation.distance(from: CLLocation(latitude: $0.latitude, longitude: $0.longitude))}).max(by: {$0 < $1})!)
        if distance <= 50 {
            distance = 50
        }
        let mapRegion = MKCoordinateRegion(center: center, latitudinalMeters: distance * 2.5, longitudinalMeters: distance * 2.5)
        let mapRect = mapRegion.mapRect
        mapView.setVisibleMapRect(mapRect, edgePadding: UIEdgeInsets(top: 120, left: 0, bottom: 200, right: 0), animated: true)
    }
    
    
    func calculateRegionAndCenterWithCompletion(coordinates: [CLLocationCoordinate2D], completion: (() -> Void)?) {
        calculateRegionAndCenter(coordinates: coordinates)
        if let completion = completion {
            completion()
        }
    }
    
    func mapView(didAdd views: [MKAnnotationView]) {
        for annView in views {
            if let annotation = annView.annotation {
                if !annotation.isKind(of: MKUserLocation.self) {
                    let endFrame = annView.frame
                    annView.frame = CGRect(x: annView.frame.origin.x,
                                           y: annView.frame.origin.y - self.view.frame.size.height,
                                           width: annView.frame.size.width,
                                           height: annView.frame.size.height)
                    
                    UIView.animate(withDuration: 0.3, delay: Double(0.01 * Double(views.index(of: annView) ?? 0)), options: .curveEaseInOut, animations: {
                        annView.frame = endFrame
                    }, completion: { (finished) in
                        if finished {
                            UIView.animate(withDuration: 0.05, animations: {
                                annView.transform = CGAffineTransform(scaleX: 1.0, y: 0.8)
                            }, completion: { (_) in
                                UIView.animate(withDuration: 0.1, animations: {
                                    annView.transform = .identity
                                })
                            })
                        }
                    })
                }
            }
        }
    }
    
    func changeRegion(to region: MKCoordinateRegion, animated: Bool = true) {
        mapView.setRegion(region, animated: animated)
    }
    
    func isSearchAgainButtonHidden() -> Bool {
        return self.searchTextField.rightView?.alpha != 1
    }
    
    
    @IBAction func moveMapToUserLocationAction(_ sender: Any) {
        let userCoord = mapView.userLocation.coordinate
        if userCoord.latitude != 0 &&
            userCoord.longitude != 0 && presenter?.userWantHisLocation == false{
            presenter?.removeAllAnnotationsFromMap()
            mapView.setRegion(MKCoordinateRegion(center: mapView.userLocation.coordinate, latitudinalMeters: 3000, longitudinalMeters: 3000), animated: true)
            presenter?.clearMatchingItems()
            searchResultsTableView.reloadData()
            searchTextField.text = ""
            dismissTextField()
            presenter?.userWantHisLocation = true
            presenter?.getNearPOIsToUserLocation()
            //            hideSearchAgainButton()
        }
    }
    
    @IBAction func cancelSearchAction(_ sender: Any) {
        dismissTextField()
    }
    
    func getListTableView() -> UITableView {
        return listTableView
    }
    
    func getTabBarView() -> DetailButtonsSectionTableView? {
        
        if let detailTab = tabBarContainerView.subviews.first as? DetailButtonsSectionTableView{
            return detailTab
        }
        return nil
    }
    
    func getSearchBarTextFieldText() -> String {
        return searchTextField.text ?? ""
    }
    
    // MARK: - Filters
    
    //    @IBAction func filterToInitialPosition() {
    //        self.horizontalFiltersCollectionView.setContentOffset(CGPoint(x: 0, y: 0), animated: true)
    //    }
    
    @IBAction func openFilter(_ sender: Any) {
        view.endEditing(true)
        presenter?.openFilters(shouldShowTitle: shouldShowTitle)
    }
    
    func toggleFilterContainerVisibility(){
        filterContainerView.isHidden = !filterEnabled
    }
    
    func locationMapButtonEnabled() {
        locationMapButton.tintColor = MapViewControllerThemeColor.locationMapButtonTintColor.value
    }
    
    func locationMapButtonDisabled() {
        locationMapButton.tintColor = MapViewControllerThemeColor.locationMapButtonNotDetermined.value
    }
    
    class func initFromStoryboard(filterEnabled: Bool = true) -> MapViewController {
        let classString = String(describing: self)
        
        if let podBundle = Bundle(for: MapViewController.self).branchLocatorBundle {
            if let viewController = UIStoryboard(name: "Map", bundle: podBundle).instantiateViewController(withIdentifier: classString) as?
                MapViewController {
                viewController.filterEnabled = filterEnabled
                return viewController
            }
        }
        assert(false, "This should never happen")
        return MapViewController()
    }
}


// MARK: - UIGestureRecognizerDelegate

extension MapViewController: UIGestureRecognizerDelegate {
    public func gestureRecognizer(_ gestureRecognizer: UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIGestureRecognizer) -> Bool {
        return true
    }
    
    public func gestureRecognizerShouldBegin(_ gestureRecognizer: UIGestureRecognizer) -> Bool {
        if gestureRecognizer.isEqual(navigationController?.interactivePopGestureRecognizer) {
            return false
        }
        return true
    }
    
    @objc func userMovedMap() {
        view.endEditing(true)
        removeRouteAndDismissPOIDetailViewController()
    }
}

// MARK: - TabBar Tap Delegate
extension MapViewController: DetailSectionTableProtocol {
    func buttonPressed(left: Bool) {
        if left {
            presenter?.mapSelected()
        } else {
            presenter?.listSelected()
        }
    }
    
    func showMap() {
        animateViewTransition(initialView: listContainerView, finalView: mapContainerView)
    }
    
    func showList() {
        removeRouteAndDismissPOIDetailViewController()
        animateViewTransition(initialView: mapContainerView, finalView: listContainerView)
        //  ANALYTICS REMOVED
//        BLAnalyticsHandler.track(event: .listView,screenName: BlEvent.listView.rawValue, isScreen: true)
    }
    
    func animateViewTransition(initialView: UIView, finalView: UIView) {
        initialView.alpha = 1.0
        finalView.alpha = 0.0
        
        UIView.animate(withDuration: 0.8, animations: {
            initialView.alpha = 0.0
            finalView.alpha = 1.0
        }, completion: nil)
        
    }
    
}

//// MARK: - UICollectionViewDelegate  - UICollectionViewDataSource
//extension MapViewController: UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {
//    public func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
//        if let numberOfItems = presenter?.getSelectedFilters().count {
//            return numberOfItems
//        }
//        return 0
//    }
//
//    public func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
//        if let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "BoxFilterCellID", for: indexPath) as? BoxFilterCollectionViewCell {
//            if let currentFilter = presenter?.getSelectedFilters()[indexPath.row] {
//                cell.configureCell(with: currentFilter)
//            }
//            return cell
//        }
//        assert(false, "cell is not registered")
//        return UICollectionViewCell()
//    }
//
//    public func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
//        let horizontalFilterHeight: CGFloat = horizontalFiltersCollectionView.frame.height
//        guard let currentFilter = presenter?.getSelectedFilters()[indexPath.row] else { return CGSize.zero }
//        let stringWidth = currentFilter.title.width(withConstrainedHeight: 29.0, font: UIFont.san_openSansRegular(ofSize: 12))
//
//        return CGSize(width: stringWidth + 20, height: horizontalFilterHeight)
//    }
//
//    public func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
//        openFilter(self)
//    }
//}
