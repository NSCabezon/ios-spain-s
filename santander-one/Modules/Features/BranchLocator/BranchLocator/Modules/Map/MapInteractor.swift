//
//  MapInteractor.swift
//  LocatorApp
//
//  Created Ivan Cabezon on 22/8/18.
//  Copyright © 2018 Globile. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
///

import UIKit
import CoreLocation


// MARK: Interactor -

protocol MapInteractorProtocol: class {
	var presenter: MapPresenterProtocol? { get set }
	var filters: [FilterType] { get set }
	func getNearPOIs(to location: CLLocationCoordinate2D)
    func getFilteredPOIs(to location: CLLocationCoordinate2D, applyedFilters: [Filter])
    func getSelectedFilters() -> [Filter]
}

class MapInteractor: MapInteractorProtocol {

    weak var presenter: MapPresenterProtocol?
	let branchesRepository: BranchesAPIRepository

	init(with dataRepository: BranchesAPIRepository) {
		self.branchesRepository = dataRepository
	}

    func getSelectedFilters() -> [Filter] {
        let userDefault = UserDefaults.standard
        if let setedFilter = userDefault.stringArray(forKey: "currentFilter") {
            let enumArray = setedFilter.map { Filter(rawValue: $0)! }
            return enumArray
        }
        return FilterType.defaultFilters
    }

	var filters: [FilterType] = [.mostPopular]

	func getNearPOIs(to location: CLLocationCoordinate2D) {
		branchesRepository.findBranches(with: location, filters: getSelectedFilters()) { poisArray, _ in
            self.presenter?.addPOIsToMap(poisArray)
        }
	}

    func getFilteredPOIs(to location: CLLocationCoordinate2D, applyedFilters: [Filter]) {
        branchesRepository.findBranches(with: location, filters: applyedFilters) { poisArray, _ in
            self.presenter?.addPOIsToMap(poisArray)
        }
    }
 
    

    
}
