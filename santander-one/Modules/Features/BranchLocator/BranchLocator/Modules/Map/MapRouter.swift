//
//  MapRouter.swift
//  LocatorApp
//
//  Created Ivan Cabezon on 22/8/18.
//  Copyright © 2018 Globile. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import MapKit

// MARK: Wireframe -

protocol MapWireframeProtocol: class {
    var halfModalTransitioningDelegate: HalfModalTransitioningDelegate? { get }
    
    func changeToPOIDetail(with selectedAnnotation: POIAnnotation, lastKnownLocation: CLLocationCoordinate2D?, showingNearestPOI show: Bool, firstTime: Bool, heights: (viewHeight: CGFloat, searchBarContainerY: CGFloat), mapView: MapViewProtocol?)
    func goToFilters(with filterDelegate: FilterDelegate, shouldShowTitle: Bool)
    
    func canOpenURL(url: URL) -> Bool
    func openURL(url: URL)
}

public class MapRouter: NSObject, MapWireframeProtocol {
    
    weak var viewController: MapViewController?
    // swiftlint:disable weak_delegate
    var halfModalTransitioningDelegate: HalfModalTransitioningDelegate?
    // swiftlint:enable weak_delegate
    var urlLauncher: URLLauncher?
    var availableFilters: [FilterTypeProtocol] = AvailableFilters.defaultAvailableFilters()
    
    var navigationMapsList: [Maps] = []
    
    //  ANALYTICS REMOVED
//    public static func createModule(shouldShowTitle: Bool = true, filtersToApply: [Filter] = [], availableFilters: [FilterTypeProtocol]?, urlLauncher: URLLauncher, analyticsDelegate: GlobileAnalyticsDelegate?, filterEnabled: Bool = true) -> MapViewController
    
    public static func createModule(shouldShowTitle: Bool = true, filtersToApply: [Filter] = [], availableFilters: [FilterTypeProtocol]?, navigationMapsList: [Maps], urlLauncher: URLLauncher, filterEnabled: Bool = true) -> MapViewController {
        // Change to get view from storyboard if not using progammatic UI
        let view = MapViewController.initFromStoryboard(filterEnabled: filterEnabled)
        let interactor = MapInteractor(with: BranchesAPIRepository())
        let router = MapRouter()
        let presenter = MapPresenter(interface: view, interactor: interactor, router: router)
        
        view.shouldShowTitle = shouldShowTitle
        view.presenter = presenter
        interactor.presenter = presenter
        router.viewController = view
        if let availableFilters = availableFilters {
            router.availableFilters = availableFilters
        }
        router.navigationMapsList = navigationMapsList
        router.urlLauncher = urlLauncher
        //  ANALYTICS REMOVED
//        BLAnalyticsHandler.analyticsDelegate = analyticsDelegate
        
        return view
    }
    
    func changeToPOIDetail(with selectedAnnotation: POIAnnotation, lastKnownLocation: CLLocationCoordinate2D?, showingNearestPOI show: Bool, firstTime: Bool, heights: (viewHeight: CGFloat, searchBarContainerY: CGFloat), mapView: MapViewProtocol?) {
        let presentingVC = POIDetailRouter.createModule(urlLauncher: urlLauncher, navigationMapsList: self.navigationMapsList)
        
        presentingVC.presenter?.detailDelegate = viewController?.presenter
        presentingVC.presenter?.showNearestPOI = show
        presentingVC.presenter?.setSelectedPOI(selectedAnnotation)
        presentingVC.presenter?.lastKnownLocation = lastKnownLocation
        
        presentingVC.view.layoutSubviews()
        halfModalTransitioningDelegate = HalfModalTransitioningDelegate(viewController: viewController!, presentingViewController: presentingVC)
        
        presentingVC.presenter?.mapViewHeightAndSearchBarContainerY = heights
        presentingVC.modalPresentationStyle = .custom
        presentingVC.transitioningDelegate = halfModalTransitioningDelegate
        
        guard let zoomWidth = viewController?.mapView.visibleMapRect.size.width else {return}
        let zoomFactor = Int(log2(zoomWidth)) - 9
        
        //If the zoom factor is more or = 7 then the map is super zoomed out and the animation of the view controller presenting is being presented whilst the zoom is still happening causing it to cut off. This code is causing a delay so that we can finish the zoom then present the vc but only if the zoom is far!
        
        print("ZOOM is currently upon presenting \(zoomFactor)")
        switch zoomFactor {
        case 5...9:
            DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + 1.75) { [weak self] in
                guard let self = self else { return }
                if !(mapView?.viewIsShown ?? false) {
                    return
                }
                self.viewController?.present(presentingVC, animated: true, completion: nil)
            }
        case 2...4:
            DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + 1) { [weak self] in
                guard let self = self else { return }
                if !(mapView?.viewIsShown ?? false) {
                    return
                }
                self.viewController?.present(presentingVC, animated: true, completion: nil)
            }
        default:
            if !(mapView?.viewIsShown ?? false) {
                return
            }
            viewController?.present(presentingVC, animated: true, completion: nil)
        }
        
        viewController?.presenter?.detailVC = presentingVC
        
        if !firstTime {
            let coord = CLLocationCoordinate2DMake(selectedAnnotation.mapPin.geoLocation.latitude, selectedAnnotation.mapPin.geoLocation.longitude)
            viewController?.mapView.setCenter(coord, animated: true)
            viewController?.removeRoute()
        }
        
    }
    
    func goToFilters(with filterDelegate: FilterDelegate, shouldShowTitle: Bool = true) {
        let filterVC = FiltersRouter.createModule(filterDelegate: filterDelegate, shouldShowTitle: shouldShowTitle, availableFilters:
            availableFilters, urlLauncher: urlLauncher)
        viewController?.navigationController?.navigationBar.backItem?.title = ""
        viewController?.navigationController?.navigationBar.topItem?.title = ""
        viewController?.navigationController?.pushViewController(filterVC, animated: true)
    }
    
    func canOpenURL(url: URL) -> Bool {
        return urlLauncher?.canOpen(url: url) ?? false
    }
    
    func openURL(url: URL) {
        urlLauncher?.open(url: url)
    }
}
