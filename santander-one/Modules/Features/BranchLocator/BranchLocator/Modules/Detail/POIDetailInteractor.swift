//
//  POIDetailInteractor.swift
//  LocatorApp
//
//  Created Ivan Cabezon on 22/8/18.
//  Copyright © 2018 Globile. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

enum FullDetailElements {
    case openingUntil
    case phone
    case schedule
    case scheduleCash
	case basicServices
	case aditionalService
    case news
    case accesibility
}

/*
 Depending on the point, some cells or others are shown. It also depends on the information you have in the POI.
 For example, an office may or may not have a telephone, so the phone cell would be placed or not.
 For this reason, when obtaining the POI, I generate 2 arrays with the type cells that have to be displayed, using the enumerated FulldetailElements
 One array for branch, other array for ATM
 */
// MARK: Interactor -

protocol POIDetailInteractorProtocol: class {
    
    var presenter: POIDetailPresenterProtocol? { get set }
	var poi: POIAnnotation? { get set }
	
    func countFullDetailElements(for mainPOI: Bool) -> Int
    
    func getCellType(for mainPOI: Bool, atIndexPath indexPath: IndexPath) -> FullDetailElements
	func getPhoneTitle(for mainPOI: Bool) -> String?
    func getPhone(for mainPOI: Bool) -> String?
    func getSchedule(for mainPOI: Bool) -> NSAttributedString?
    func getScheduleInCompounds(for mainPOI: Bool) -> [ScheduleDay]?
    func getScheduleCash(for mainPOI: Bool) -> [String]?
	
	func shouldShowAudioGuidanceInAccessibility(for mainPOI: Bool) -> Bool
    func isBranch() -> Bool
	func hasRelatedAtm() -> Bool
	func shouldShowTitles(isMainPOI: Bool) -> Bool 
	func appointmentURL(for mainPOI: Bool) -> URL?
	func getNewsAndAditionalInfo(for mainPOI: Bool) -> NSAttributedString?
	func getAdditionalServices(for mainPOI: Bool) -> AdditionalServices?
	
	func getHoursForToday(isMainPOI: Bool) -> String?
	func getBasicServices(for mainPOI: Bool) -> [String]
	
	func getAttributtedStringFor(mainPoi poi: POI) -> NSAttributedString?
	func getAttributtedStringFor(secondaryPoiIn poi: POI) -> NSAttributedString?
}

class POIDetailInteractor: POIDetailInteractorProtocol {

    
    weak var presenter: POIDetailPresenterProtocol?
	var poi: POIAnnotation? {
		didSet {
			configureDetailElements(with: poi?.mapPin)
		}
	}
    
    var mainElements: [FullDetailElements] = []
    var secondaryElements: [FullDetailElements] = []
	
	func configureDetailElements(with poi: POI?) {
        //check if have some element, then add to array the element to draw
        if let poi = poi {
            generateMainDetail(with: poi)
            
//            if let firstRelatedPOI = poi.relatedPOIs.first {
//                generateSecondaryDetail(with: firstRelatedPOI)
//            }
      
                        if let firstRelatedPOI = poi.relatedPOIs.first {
                            guard let mixedPoi = createMixedPOI(relatedPOI: poi.relatedPOIs) else {return}
                            generateSecondaryDetail(with: mixedPoi)
                       }
            
//            if poi.relatedPOIs.count > 1 {
//                generateSecondaryDetail(with: createMixedPOI(relatedPOI: poi.relatedPOIs))
////                createMixedPOI(relatedPOI: poi.relatedPOIs)
//            }
        }
    }
    
    func isExistValue(list: [JSON], originalValue: JSON) -> Bool {
        let isExist = false
        for element in list {

            if element.equatable(originalValue) {
                print("Equated")
                return true
            }
        }
        return isExist
    }
    


    func createMixedPOI(relatedPOI: [POI]) -> POI? {
        
    var result = relatedPOI.first
        if relatedPOI.count > 1 {
            
             // basic services extras
            for x in 1...relatedPOI.count - 1 {
                let element = relatedPOI[x]
                
                if let commercialList = element.commercialProducts {
                    for x in commercialList {
                        if result?.commercialProducts == nil {
                           // add value
                            result?.commercialProducts = [JSON]()
                            result?.commercialProducts?.append(x)
                        } else {
                            if !isExistValue(list: result!.commercialProducts! , originalValue: x){
                                result?.commercialProducts?.append(x)
                        }
                    }
                }
            }
                
                // additional service extras
                let additionalServiceList = element.getAdditionalServices()
                if result?.getAdditionalServices() != nil {
                    
                    if let atmList = additionalServiceList.atmAditionalServices {
                        for x in atmList {
                            if ((result?.getAdditionalServices().atmAditionalServices) == nil){
                                // add val
                                result?.extraAtmList.append(x)
                            } else {
                                if !doesExistString(originalList: atmList, checkAgainst: x) {
                                    result?.extraAtmList.append(x)
                                }
                            }
                        }
                    }
                    
                    if let financialList = additionalServiceList.financial{
                        for x in financialList {
                            if ((result?.getAdditionalServices().financial) == nil) {
                                result?.extraFinancialList.append(x)
                            }else {
                                if !doesExistString(originalList: financialList, checkAgainst: x) {
                                    result?.extraFinancialList.append(x)
                                }
                            }
                        }
                    }
                    
                    if let nonFinancialList = additionalServiceList.nonFinancial {
                        for x in nonFinancialList{
                            if result?.getAdditionalServices().nonFinancial == nil {
                                result?.extraNonFinancialList.append(x)
                            }else {
                                if !doesExistString(originalList: nonFinancialList, checkAgainst: x){
                                    result?.extraNonFinancialList.append(x)
                                }
                            }
                        }
                    }
                }
            }
        }
        return result
    }
  
    
    func doesExistString(originalList: [String], checkAgainst: String) -> Bool {
        let doesExist = false
        for item in originalList {
            if item == checkAgainst {
                return true
            }
        }
        return doesExist
    }

    
    
	func countFullDetailElements(for mainPOI: Bool) -> Int {
		if mainPOI {
			return mainElements.count
		} else {
			return secondaryElements.count
		}
    }
	
    // MARK: - TableView methods
    func getCellType(for mainPOI: Bool, atIndexPath indexPath: IndexPath) -> FullDetailElements {
		if mainPOI {
			return mainElements[indexPath.row]
		} else {
			return secondaryElements[indexPath.row]
		}
    }
	
	
	func getPhoneTitle(for mainPOI: Bool) -> String? {
		if mainPOI {
			return poi?.mapPin.objectType.code.phoneTitle
		} else {
			return poi?.mapPin.getFirstPhoneFromRelatedPoi()
		}
	}
    
    func getPhone(for mainPOI: Bool) -> String? {
		if mainPOI {
			return poi?.mapPin.phoneForMainPOI()
		} else {
			return poi?.mapPin.getFirstPhoneFromRelatedPoi()
		}
    }
	
	//	Format
	//	0--> Normal.
	//	2--> Red
	//	3--> Bold
	//	4--> Uppercased
	func getNewsAndAditionalInfo(for mainPOI: Bool) -> NSAttributedString? {
		if mainPOI {
			return poi?.mapPin.getNewsAndAditionalInfoForMainPOI()
		} else {
			return poi?.mapPin.getNewsAndAditionalInfoForFirstRelatedPOI()
		}
	}
	
	func isBranch() -> Bool {
		if poi?.mapPin.objectType.code == .atm {
			return false
		} else {
			return true
		}
	}
	
	func shouldShowTitles(isMainPOI: Bool) -> Bool {
		if isMainPOI {
			if let type = poi?.mapPin.objectType.code {
				switch type {
				case .atm:
					return false
				default:
					break
				}
			}
		}
		return true
	}
	
	func shouldShowAudioGuidanceInAccessibility(for mainPOI: Bool) -> Bool {
		if mainPOI {
			if poi?.mapPin.objectType.code == .atm {
				return poi?.mapPin.attributtes?.audioGuidance ?? false
			}
		} else if poi?.mapPin.relatedPOIs.first?.objectType.code == .atm {
			return poi?.mapPin.attributtes?.audioGuidance ?? false
		}
		return false
	}
	
	func hasRelatedAtm() -> Bool {
		return poi?.mapPin.relatedPOIs.count ?? 0 > 0
	}
	
	func appointmentURL(for mainPOI: Bool) -> URL? {
		if mainPOI {
			if poi?.mapPin.objectType.code == .atm {
				return nil
			}
			if let appointmentString = poi?.mapPin.appointmentURL,
				let appointmentURL = URL(string: appointmentString) {
				return appointmentURL
			}
			return nil
		} else {
			if let relatedPOIs = poi?.mapPin.relatedPOIs {
				for relatedPOI in relatedPOIs where relatedPOI.appointmentURL != nil {
					if relatedPOI.objectType.code == .atm {
						return nil
					}
					if let appointmentString = relatedPOI.appointmentURL,
						let appointmentURL = URL(string: appointmentString) {
						return appointmentURL
					}
				}
			}
			return nil
		}
	}
	
	func getOpeningHours(for mainPOISelected: Bool) -> NSAttributedString? {
		if let mainPOI = poi?.mapPin {
			if mainPOISelected {
				return getAttributtedStringFor(mainPoi: mainPOI)
			} else {
				return getAttributtedStringFor(secondaryPoiIn: mainPOI)
			}
		}
		return nil
	}
 
	func getHoursForToday(isMainPOI: Bool) -> String? {
		if isMainPOI {
			return poi?.mapPin.schedule?.openingHoursForToday
		} else {
			if let relatedPOIs = poi?.mapPin.relatedPOIs {
				for poi in relatedPOIs where poi.schedule?.openingHoursForToday != "" {
					return poi.schedule?.openingHoursForToday
				}
			}
		}
		return nil
	}
	
    func getAttributtedStringFor(mainPoi poi: POI) -> NSAttributedString? {
        let attrsForTitle: [NSAttributedString.Key: Any] = [.font: DetailCardCellAndViewThemeFont.rightAndLeftStatusLabelTitle.value,
                                                            .foregroundColor: DetailCardCellAndViewThemeColor.rightAndLeftStatusLabelTitle.value]
        let attrsForSchedule: [NSAttributedString.Key: Any] = [.font: DetailCardCellAndViewThemeFont.rightAndLeftStatusLabelBody.value,
                                                               .foregroundColor: DetailCardCellAndViewThemeColor.rightAndLeftStatusLabelBody.value]
        
        let attributedString = NSMutableAttributedString(string: poi.objectType.code.name, attributes: attrsForTitle)
        if poi.schedule?.openingHoursForToday != nil && poi.schedule?.openingHoursForToday != "" {
            let times = (poi.schedule?.openingHoursForToday.split(separator: "\n"))
            if let times = times {
                if times.count == 1 {
                    attributedString.append(NSAttributedString(string: "\n".appending("\(localizedString("bl_today")), \(times.first ?? "")h"), attributes: attrsForSchedule))
                } else {
                    attributedString.append(NSAttributedString(string: "\n".appending("\(times.first ?? "")h\n\(times[1])h"), attributes: attrsForSchedule))
                }
            }
            
        } else {
            attributedString.append(NSAttributedString(string: "\n".appending("24h"), attributes: attrsForSchedule))
        }
        return attributedString
    }
	
    
    func getAttributtedStringFor(secondaryPoiIn poi: POI) -> NSAttributedString? {
        let attrsForTitle: [NSAttributedString.Key: Any] = [.font: DetailCardCellAndViewThemeFont.rightAndLeftStatusLabelTitle.value,
                                                            .foregroundColor: DetailCardCellAndViewThemeColor.rightAndLeftStatusLabelTitle.value]
        let attrsForSchedule: [NSAttributedString.Key: Any] = [.font: DetailCardCellAndViewThemeFont.rightAndLeftStatusLabelBody.value,
                                                               .foregroundColor: DetailCardCellAndViewThemeColor.rightAndLeftStatusLabelBody.value]
        
        let attributedString = NSMutableAttributedString(string: poi.relatedPOIs.first?.objectType.code.name ?? "", attributes: attrsForTitle)
        
        
        for poi in poi.relatedPOIs where poi.schedule?.openingHoursForToday != "" {
            
            let times = (poi.schedule?.openingHoursForToday.split(separator: "\n"))
            if let times = times {
                if times.count == 1 {
                    attributedString.append(NSAttributedString(string: "\n".appending("\(times.first ?? "")h"), attributes: attrsForSchedule))
                } else {
                    attributedString.append(NSAttributedString(string: "\n".appending("\(times.first ?? "")h\n\(times[1])h"), attributes: attrsForSchedule))
                }
            }
            
            return attributedString
        }
        attributedString.append(NSAttributedString(string: "\n".appending("24h"), attributes: attrsForSchedule))
        return attributedString
    }
    
	func getSchedule(for mainPOI: Bool) -> NSAttributedString? {
		if mainPOI {
			return poi?.mapPin.scheduleForMainPOI()
		} else {
			return poi?.mapPin.getSecondarySchedule()
		}
    }
    
    func getScheduleInCompounds(for mainPOI: Bool) -> [ScheduleDay]? {
        if mainPOI {
            return poi?.mapPin.scheduleInCompounds()
        } else {
            return poi?.mapPin.getSecondaryScheduleInCompunds()
        }
    }
    
    func getScheduleCash(for mainPOI: Bool) -> [String]? {
        return poi?.mapPin.scheduleCash
    }
    
	
	func getAdditionalServices(for mainPOI: Bool) -> AdditionalServices? {
		if mainPOI {
			return poi?.mapPin.getAdditionalServices()
		} else {
            if let mixedPoi = createMixedPOI(relatedPOI: (poi?.mapPin.relatedPOIs)!) {
                return mixedPoi.getAdditionalServices()
            } else {
                return poi?.mapPin.relatedPOIs.first?.getAdditionalServices()
            }
		}
	}
	
	func getBasicServices(for mainPOI: Bool) -> [String] {
		if mainPOI {
			return poi?.mapPin.getATMBasicServices() ?? []
		} else {
            if let mixedPoi = createMixedPOI(relatedPOI: (poi?.mapPin.relatedPOIs)!) {
                return mixedPoi.getATMBasicServices()
            } else {
                return poi?.mapPin.relatedPOIs.first?.getATMBasicServices() ?? []
            }
		}
	}
	
	
    // MARK: - Generate array of elements to tableView
	
	func generateMainDetail(with poi: POI) {
		
        // if it has a schedule then we can add the opening and closing times advisor cell. // the opening cell should show if it doesnt have any closing time!!!!
        if poi.hasSchedule(){
            mainElements.append(.openingUntil)
        }
        //check phone
		if poi.contactData?.phoneNumber != nil {
			mainElements.append(.phone)
		}

		//schedule //opening hrs
		if poi.hasSchedule() {
			mainElements.append(.schedule)
		}
		
        if poi.hasScheduleCash() {
            mainElements.append(.scheduleCash)
        }
        
		//news
		if getNewsAndAditionalInfo(for: true) != nil {
			mainElements.append(.news)
		}
		
		//basic services
		if poi.hasBasicServices() {
			mainElements.append(.basicServices)
		}
		
		//aditional services
		if poi.hasAdditionalServices() {
			mainElements.append(.aditionalService)
		}
		
		//accesibility
		if let access = poi.attributtes?.accesibility,
			access == true {
			mainElements.append(.accesibility)
		}
    
    }
    
	func generateSecondaryDetail(with poi: POI) {
		
        //atm opening hrs
        if poi.hasSchedule() {
            secondaryElements.append(.openingUntil)
        }

        //check phone
		if poi.getFirstPhoneFromRelatedPoi() != nil {
			secondaryElements.append(.phone)
		}
		
		//schedule
		if poi.hasSchedule() {
			secondaryElements.append(.schedule)
		}
		
		//news
		if getNewsAndAditionalInfo(for: false) != nil {
			secondaryElements.append(.news)
		}
		
		//basic services
		if poi.hasBasicServices() {
			secondaryElements.append(.basicServices)
		}
		
		//aditional services
		if poi.hasAdditionalServices() {
			secondaryElements.append(.aditionalService)
		}
		
		//accesibility
		if poi.attributtes?.accesibility ?? false {
			secondaryElements.append(.accesibility)
		}
    
    }
}
