//
//  POIDetailViewController.swift
//  LocatorApp
//
//  Created Ivan Cabezon on 22/8/18.
//  Copyright © 2018 Globile. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//
//
import UIKit
import MapKit

// MARK: View -

protocol POIDetailViewProtocol: class {
    var presenter: POIDetailPresenterProtocol? { get set }
    func configureWith(mapPin: POI)
    func reloadTable()
}

class POIDetailViewController: UIViewController, POIDetailViewProtocol, View {
  

    @IBOutlet weak var arrowImageView: UIImageView!
    @IBOutlet weak var closestBranchLabel: UILabel!
    @IBOutlet weak var santanderLabel: UILabel!
    @IBOutlet weak var branchInfoLabel: UILabel!
    @IBOutlet weak var streetDataLabel: UILabel!

    @IBOutlet weak var distanceContainerView: UIView!
	@IBOutlet weak var personImage: UIImageView!
	@IBOutlet weak var distanceLabel: UILabel!
	@IBOutlet weak var headToImage: UIImageView!

    @IBOutlet weak var topContentView: UIView!
	@IBOutlet weak var topContentBackgroundView: UIView!

	@IBOutlet var statusViewHeightConstraint: NSLayoutConstraint!
	@IBOutlet weak var statusView: UIView!
    @IBOutlet weak var leftStatusLabel: UILabel!
    @IBOutlet weak var rightStatusLabel: UILabel!

    @IBOutlet var makeAppointmentButton: GlobileEndingButton!{
        didSet {
            makeAppointmentButton.layer.cornerRadius = makeAppointmentButton.frame.height / 2
            makeAppointmentButton.layer.borderWidth = 1
        makeAppointmentButton.setTitle(localizedString("bl_make_appointment"), for: .normal)
            makeAppointmentButton.isPrimary = false
            
            
        }
    }
    
    @IBOutlet weak var tableView: UITableView!
    
    @IBOutlet var tableViewTopConstraint: NSLayoutConstraint!
    @IBOutlet var tableViewTopAlignConstraint: NSLayoutConstraint!
    
    @IBOutlet var santanderLabelConstraint: NSLayoutConstraint!
    
    var shadowLayer: CAShapeLayer?
	var presenter: POIDetailPresenterProtocol?

    var distanceContainerAlignConstraint: NSLayoutConstraint?
    
    let closestHeightConstraint = 44.0
    let noClosestHeightConstraint = 8.0
    
    override func viewDidLoad() {
        super.viewDidLoad()

        configureUI()
		presenter?.viewDidLoad()
        
    }
    deinit { print("deinit \(self)") }

    override func viewDidDisappear(_ animated: Bool) {
        super.viewDidDisappear(animated)
        presenter?.deselectPin()

    }

	override func viewDidLayoutSubviews() {
		super.viewDidLayoutSubviews()

		distanceContainerView.layer.cornerRadius = distanceContainerView.frame.height / 2
		distanceContainerView.layer.masksToBounds = true

		dropShadow()
	}

    func configureUI() {
		statusViewHeightConstraint.isActive = false

		let bundle = Bundle(for: MapViewController.self)
        arrowImageView.image = UIImage(named: "rectangle_detail", in: bundle.branchLocatorBundle, compatibleWith: nil)

        closestBranchLabel.textColor = UIColor.santanderRed
        closestBranchLabel.font = .santander(family: .headline, type: .bold, size: 14)
        closestBranchLabel.text = localizedString("bl_closest_branch")
        if (presenter?.showNearestPOI)! {
            closestBranchLabel.isHidden = false
            santanderLabelConstraint.constant = CGFloat(closestHeightConstraint)
        } else {
            closestBranchLabel.isHidden = true
            santanderLabelConstraint.constant = CGFloat(noClosestHeightConstraint)
        }
        
        if (presenter?.showMakeAppointment())! {
            makeAppointmentButton.isHidden = false
            if let constraint = distanceContainerAlignConstraint {
                distanceContainerView.removeConstraint(constraint)
            }
            distanceContainerAlignConstraint = distanceContainerView.centerYAnchor.constraint(equalTo: santanderLabel.centerYAnchor)
            distanceContainerAlignConstraint?.isActive = true
            
        } else {
            makeAppointmentButton.isHidden = true
            if let constraint = distanceContainerAlignConstraint {
                distanceContainerView.removeConstraint(constraint)
            }
            distanceContainerAlignConstraint = distanceContainerView.centerYAnchor.constraint(equalTo: streetDataLabel.centerYAnchor)
            distanceContainerAlignConstraint?.isActive = true
        }

        santanderLabel.textColor = DetailCardCellAndViewThemeColor.santanderLbl.value
        santanderLabel.font = DetailCardCellAndViewThemeFont.santanderLbl.value

        branchInfoLabel.textColor = DetailCardCellAndViewThemeColor.branchInfoLbl.value
        branchInfoLabel.font = DetailCardCellAndViewThemeFont.branchInfoLbl.value
        branchInfoLabel.text = ""

        leftStatusLabel.text = " "
        rightStatusLabel.text = " "

        //personImage.image = UIImage(resourceName: "person")
        personImage.isHidden = true
        personImage.widthAnchor.constraint(equalToConstant: 0).isActive = true
		headToImage.image = UIImage(resourceName: "headTo")

        streetDataLabel.textColor = .mediumSanGray
        streetDataLabel.font = .santander(family: .text, type: .regular, size: 14)

        distanceLabel.textColor = UIColor.white
        distanceContainerView.backgroundColor = DetailCardCellAndViewThemeColor.blueButtons.value

        tableView.delegate = presenter
        tableView.dataSource = presenter
		tableView.isHidden = true
		tableView.estimatedRowHeight = UITableView.automaticDimension
        tableView.showsVerticalScrollIndicator = false
		tableView.tableFooterView = UIView(frame: CGRect.zero)
        tableView.separatorColor = DetailCardCellAndViewThemeColor.tableViewSeperators.value
        tableView.layoutMargins = UIEdgeInsets.zero
        tableView.separatorInset = UIEdgeInsets.zero
        
        let tableViewInsets = UIEdgeInsets(top: 0, left: 0, bottom: 20, right: 0)
        self.tableView.contentInset = tableViewInsets
        
		registerCells()

        makeAppointmentButton.addTarget(self, action: #selector(makeAppintment), for: .touchUpInside)
		distanceContainerView.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(routeToPOIAction)))
		topContentView.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(openOrClose)))
    }
    
	func registerCells() {
        let bundle = Bundle(for: MapViewController.self).branchLocatorBundle

		let phoneCellNib = UINib(nibName: "PhoneCell", bundle: bundle)
		tableView.register(phoneCellNib, forCellReuseIdentifier: PhoneCell.nibString())

		let scheduleCellNib = UINib(nibName: "ScheduleTableViewCell", bundle: bundle)
		tableView.register(scheduleCellNib, forCellReuseIdentifier: ScheduleTableViewCell.nibString())
        
        let scheduleCashCellNib = UINib(nibName: "ScheduleCashTableViewCell", bundle: bundle)
        tableView.register(scheduleCashCellNib, forCellReuseIdentifier: ScheduleCashTableViewCell.nibString())

		let accesibilityCellNib = UINib(nibName: "AccessibilityTableViewCell", bundle: bundle)
		tableView.register(accesibilityCellNib, forCellReuseIdentifier: AccessibilityTableViewCell.nibString())

		let servicesCellNib = UINib(nibName: "AdditionalServicesTableViewCell", bundle: bundle)
		tableView.register(servicesCellNib, forCellReuseIdentifier: AdditionalServicesTableViewCell.nibString())

		let newsCellNib = UINib(nibName: "NewsTableViewCell", bundle: bundle)
		tableView.register(newsCellNib, forCellReuseIdentifier: NewsTableViewCell.nibString())

		let basicServicesCellNib = UINib(nibName: "BasicServicesTableViewCell", bundle: bundle)
		tableView.register(basicServicesCellNib, forCellReuseIdentifier: BasicServicesTableViewCell.nibString())
                let openingHrsCellNib = UINib(nibName: "OpeningHoursCell", bundle: bundle)
        tableView.register(openingHrsCellNib, forCellReuseIdentifier: OpeningHoursCell.nibString())
	}

	func configureUI(for openState: Bool) {
		if openState {
			//arrowImageView.image = UIImage(resourceName: "arrow-down")
            if (presenter?.showNearestPOI)!{
                statusView.isHidden = true
                //tableViewTopConstraint.constant = max(-distanceContainerView.frame.minY+10, -streetDataLabel.frame.minY+10)
                tableViewTopConstraint.isActive = false
                tableViewTopAlignConstraint.isActive = true
                tableView.isHidden = false
            } else {
                statusView.isHidden = true
                //tableViewTopConstraint.constant = max(-distanceContainerView.frame.minY-10, -streetDataLabel.frame.minY-10)
                tableViewTopConstraint.isActive = false
                tableViewTopAlignConstraint.isActive = true
                tableView.isHidden = false
            }
         
		} else {
			//arrowImageView.image = UIImage(resourceName: "arrow-up")
			statusView.isHidden = false
			tableView.isHidden = true
		}
	}


    func configureWith(mapPin: POI) {
        streetDataLabel.text = mapPin.location?.fullAddress.lowercased().capitalized
        
        var initTitleText = ""
        distanceLabel.text = ""
		if let code = mapPin.objectType?.code {
			switch code {
			case .atm:
				//santanderLabel.text = localizedString("bl_atm")
                initTitleText = localizedString("bl_santander")
                
				leftStatusLabel.attributedText = presenter?.getAttributtedStringFor(mainPoi: mapPin)

				rightStatusLabel.text = ""
			case .branch:
				//santanderLabel.text = localizedString("bl_branch")
                initTitleText = localizedString("bl_santander")

				leftStatusLabel.attributedText = presenter?.getAttributtedStringFor(mainPoi: mapPin)

				if mapPin.relatedPOIs.count > 0 {
					rightStatusLabel.attributedText = presenter?.getAttributtedStringFor(secondaryPoiIn: mapPin)
				}
			case .corresponsales:
				initTitleText = localizedString("bl_branchInfoCorresponsales")

				leftStatusLabel.attributedText = presenter?.getAttributtedStringFor(mainPoi: mapPin)
			}
            
            guard let city = mapPin.location?.city else {
                santanderLabel.text = initTitleText
                return
            }
            
            santanderLabel.text = "\(initTitleText) - \(city.uppercased())"
            
		}

		if mapPin.subType?.code == .nonSantanderATM {
			branchInfoLabel.text = ""
		} else {
			if let dict = mapPin.subType?.multi {
				branchInfoLabel.text = getLanguageOption(from: dict).lowercased().capitalized
			} else {
				branchInfoLabel.text = ""
			}
		}

		if let userLocationCoordinate = presenter?.lastKnownLocation {
			let userLocation = CLLocation(latitude: userLocationCoordinate.latitude, longitude: userLocationCoordinate.longitude)
			let distance = CLLocation(latitude: mapPin.geoLocation.latitude, longitude: mapPin.geoLocation.longitude).distance(from: userLocation)
			let distanceFormatter = MKDistanceFormatter()
            distanceFormatter.unitStyle = .abbreviated
			distanceFormatter.locale = Locale.current
			let str = distanceFormatter.string(fromDistance: distance)
			distanceLabel.text = str
			distanceContainerView.isHidden = false
		} else {
			distanceLabel.text = ""
			distanceContainerView.isHidden = true
		}

        dropShadow()
    }

    func reloadTable() {
        tableView.reloadData()
		DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + 0.05) {
			self.tableView.scrollRectToVisible(CGRect(x: 0, y: 0, width: 1, height: 1), animated: false)
		}
    }

    @objc func makeAppintment() {
        presenter?.makeAppintment()
    }
    
	@objc func routeToPOIAction() {
		presenter?.routeToPOIAction()
	}

	@objc func openOrClose() {
		presenter?.handleOpenOrClose()
	}

    func dropShadow() {
		self.shadowLayer?.removeFromSuperlayer()
		let shadowLayer = CAShapeLayer()
		shadowLayer.path = UIBezierPath(roundedRect: view.bounds, cornerRadius: 8).cgPath
		shadowLayer.fillColor = UIColor.white.cgColor

		shadowLayer.shadowColor = UIColor.darkGray.cgColor
		shadowLayer.shadowOpacity = 0.7
		shadowLayer.shadowOffset = .zero
		shadowLayer.shadowRadius = 8
		shadowLayer.shadowPath = UIBezierPath(rect: view.bounds).cgPath

		topContentBackgroundView.layer.insertSublayer(shadowLayer, at: 0)
		self.shadowLayer = shadowLayer
    }


	class func initFromStoryboard() -> POIDetailViewController {
		let classString = String(describing: self)
		let frameworkBundle = Bundle(for: MapViewController.self)
        if let viewController = UIStoryboard(name: "POIDetail", bundle: frameworkBundle.branchLocatorBundle).instantiateViewController(withIdentifier: classString) as? POIDetailViewController {
			return viewController
		} else {
			assert(false, "This should never happen")
			return POIDetailViewController()
		}
	}
}



