//
//  FiltersViewController.swift
//  LocatorApp
//
//  Created Ivan Cabezon on 23/8/18.
//  Copyright © 2018 Globile. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

protocol FiltersViewProtocol: class {
    var presenter: FiltersPresenterProtocol? {get set}
	func setClearButtonTitle(title: String)
	func selectRow(at indexPath: IndexPath, animated: Bool, scrollPosition: UITableView.ScrollPosition)
	func indexPathsForSelectedRows() -> [IndexPath]?
	func deselectRow(at indexPath: IndexPath, animated: Bool)
	func dequeueReusableCell(with identifier: String, for indexPath: IndexPath) -> UITableViewCell

	func reloadTableView()
    func backAndApplyFilters()
    func scrolToSection(showAllFilters: Bool)
}

class FiltersViewController: UIViewController, FiltersViewProtocol {

    @IBOutlet weak var filterTitle: UILabel!
    @IBOutlet weak var clearButton: GlobileEndingButton!
    @IBOutlet weak var applyButton: GlobileEndingButton!
    @IBOutlet weak var filterTable: UITableView!
    @IBOutlet weak var topFilterView: UIView!
    @IBOutlet weak var bottomView: UIView!
    @IBOutlet var separatorView: UIView!
    
    var presenter: FiltersPresenterProtocol?
    var shouldShowTitle = true 
    
	override func viewDidLoad() {
        super.viewDidLoad()
        if shouldShowTitle {
            addNavBarImage(imageName: "titleBar", navigationItem: navigationItem)
        }
        self.loadTableData()
        presenter?.viewDidLoad()
    }
    
    deinit { print("deinit \(self)") }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.configureUI()
        //  ANALYTICS REMOVED
//        BLAnalyticsHandler.track(event: .filtersView, screenName: BlEvent.filtersView.rawValue ,isScreen: true)
    }
    
    func scrolToSection(showAllFilters: Bool) {
        if showAllFilters {
            let indexPath = IndexPath(row: 0, section: 1)
            self.filterTable.scrollToRow(at: indexPath, at: .top, animated: true)
        } else {
            let lastCell = (presenter?.tableView(filterTable, numberOfRowsInSection: 0) ?? 0) - 1
            let indexPath = IndexPath(row: lastCell, section: 0)
            self.filterTable.scrollToRow(at: indexPath, at: .bottom, animated: true)
        }
    }
    
    func loadTableData() {
        let bundle = Bundle(for: MapViewController.self)
        let cellNib = UINib(nibName: "FilterTableViewCell", bundle: bundle.branchLocatorBundle)
        filterTable.register(cellNib, forCellReuseIdentifier: FilterTableViewCell.nibString())
        filterTable.delegate = presenter
        filterTable.dataSource = presenter
    }
    
    func configureUI() {
        let titleView = loadCustomTitleView()
        self.navigationItem.titleView = titleView
        self.view.backgroundColor = .white
        topFilterView.backgroundColor = FilterTableViewColor.filterTableViewBackgroundColor.value
        bottomView.backgroundColor = .white
        
        filterTitle.textColor = FilterTableViewColor.filterTitle.value
        filterTitle.font = FilterTableViewFont.filterTitle.value
        filterTitle.text = localizedString("bl_filter_title").uppercased()
        filterTable.separatorStyle = .none
        filterTable.backgroundColor = FilterTableViewColor.filterTableViewBackgroundColor.value
        clearButton.backgroundColor = UIColor.clear
        clearButton.isPrimary = false
        clearButton.titleLabel?.font = FilterTableViewFont.clearButton.value
        clearButton.setTitle(localizedString("bl_delete_all_filter"), for: .normal)
        applyButton.setTitle(localizedString("bl_apply_filter").uppercased(), for: .normal)
        applyButton.layer.cornerRadius = 20
        
        separatorView.backgroundColor = FilterTableViewCellColor.titleUnselected.value
    }
	
	func setClearButtonTitle(title: String) {
		clearButton.setTitle(title, for: .normal)
	}
	
	func selectRow(at indexPath: IndexPath, animated: Bool, scrollPosition: UITableView.ScrollPosition) {
		filterTable.selectRow(at: indexPath, animated: animated, scrollPosition: scrollPosition)
	}
	
	func indexPathsForSelectedRows() -> [IndexPath]? {
		return filterTable.indexPathsForSelectedRows
	}
	
	func deselectRow(at indexPath: IndexPath, animated: Bool) {
		filterTable.deselectRow(at: indexPath, animated: animated)
	}
	
	func reloadTableView() {
		filterTable.reloadData()
	}
	
	func dequeueReusableCell(with identifier: String, for indexPath: IndexPath) -> UITableViewCell {
		return filterTable.dequeueReusableCell(withIdentifier: identifier, for: indexPath)
	}
    
    func backAndApplyFilters() {
        self.navigationController?.popViewController(animated: true)
    }
	
    @IBAction func clearFilters () {
        presenter?.clearFilters()
    }
    
    @IBAction func applyFilters(_ sender: Any) {
        presenter?.applyFilters()
    }
	
	class func initFromStoryboard() -> FiltersViewController {
		let classString = String(describing: self)
		let bundle = Bundle(for: MapViewController.self)
        if let viewController = UIStoryboard(name: "Filters", bundle: bundle.branchLocatorBundle).instantiateViewController(withIdentifier: classString) as? FiltersViewController {
			return viewController
		} else {
			assert(false, "This should never happen")
			return FiltersViewController()
		}
	}
}
