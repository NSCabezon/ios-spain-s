//
//  FiltersPresenter.swift
//  LocatorApp
//
//  Created Ivan Cabezon on 23/8/18.
//  Copyright © 2018 Globile. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

protocol FiltersPresenterProtocol: class, UITableViewDataSource, UITableViewDelegate {
    func applyFilters()
    func viewDidLoad()
    func clearFilters()
    func getSelectedItemsAtTableView() -> [Filter]
	
	func canOpenURL(url: URL) -> Bool
	func openURL(url: URL)
}

class FiltersPresenter: NSObject, FiltersPresenterProtocol {
    
    var interactor: FiltersInteractorProtocol
    var router: FiltersWireframeProtocol
	weak var view: FiltersViewProtocol?
	
    weak var filterDelegate: FilterDelegate?
	var mapInteractor: MapInteractor?
	
	var showAllFilters: Bool = false
	var availableFilters: [FilterTypeProtocol]?
//    var hasCleaned = false

    init(interface: FiltersViewProtocol, filterDelegate: FilterDelegate, interactor: FiltersInteractorProtocol, router: FiltersWireframeProtocol) {
        self.view = interface
        self.interactor = interactor
        self.router = router
        self.filterDelegate = filterDelegate
        super.init()
    }
	
    @objc func showMoreLess() {
        //  ANALYTICS REMOVED
//        BLAnalyticsHandler.track(event: .seeMoreButton,
//                               screenName: BlEvent.filtersView.rawValue,
//                               with: [BlKeys.eventAction.rawValue:BlEvent.seeMoreButton.rawValue],
//                               isScreen: false)
        
        showAllFilters = !showAllFilters
		interactor.save(with: getSelectedItemsAtTableView())
        view?.reloadTableView()
        viewDidLoad()
        view?.scrolToSection(showAllFilters: self.showAllFilters)
    }
    
    func viewDidLoad() {
        var section = 0
		if let availableFilters = availableFilters {
			for filterType in availableFilters {
				var indexRow = 0
				for filter in filterType.filters {
					if interactor.selectedFilters.contains(filter) {
						view?.selectRow(at: IndexPath(row: indexRow, section: section), animated: false, scrollPosition: .none)
					}
					indexRow += 1
				}
				section += 1
			}
		}
    }
    
    
    func getSelectedItemsAtTableView() -> [Filter] {
        guard let indexPaths = view?.indexPathsForSelectedRows() else {
            return []
        }
        var selectedFilters: [Filter] = []
        for indexPath in indexPaths {
			if let availableFilters = availableFilters {
                selectedFilters.append(availableFilters[indexPath.section].filters[indexPath.row])
			}
        }
        return selectedFilters
    }
    
    func applyFilters() {
        let selectedFilters = getSelectedItemsAtTableView()
		checkAndSendAnalytics(with: selectedFilters)
        interactor.save(with: selectedFilters)
        view?.backAndApplyFilters()
        filterDelegate?.apply(selectedFilters)
    }
	
    func clearFilters() {
        //  ANALYTICS REMOVED
//        BLAnalyticsHandler.track(event: .tapClean,
//                               screenName: BlEvent.filtersView.rawValue,
//                               with: [BlKeys.eventAction.rawValue: BlEvent.tapClean.rawValue],
//                               isScreen: false)
        
//        if !hasCleaned {
		if let availableFilters = availableFilters {
            for section in 0..<(availableFilters.count) {
                for row in 0..<(availableFilters[section].filters.count) {
                    let indexPath = IndexPath(row: row, section: section)
                    view?.deselectRow(at: indexPath, animated: false)
                }
            }
		}
//            view?.setClearButtonTitle(title: localizedString("bl_undo_filter"))
//            hasCleaned = true
//        } else {
//            view?.setClearButtonTitle(title: localizedString("bl_delete_all_filter"))
//            viewWillAppear()
//            hasCleaned = false
//        }
    }
    
    func checkAndSendAnalytics(with selectedFilters: [Filter]) {
        //  ANALYTICS REMOVED
//        BLAnalyticsHandler.trackFilterEvent(with: selectedFilters, screenName: BlEvent.filtersView.rawValue, isScreen: false)
    }
	
	func canOpenURL(url: URL) -> Bool {
		return router.canOpenURL(url: url)
	}
	
	func openURL(url: URL) {
		router.openURL(url: url)
	}
}

extension FiltersPresenter {
    func numberOfSections(in tableView: UITableView) -> Int {
		if showAllFilters, let availableFilters = availableFilters {
			return availableFilters.count
		} else {
			return 1
		}
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
		return availableFilters?[section].filters.count ?? 0
    }
    
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return 40
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 56
    }

    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        let view = UIView(frame: CGRect(x: 0, y: 0, width: tableView.bounds.width, height: 40))
        view.backgroundColor = FilterTableViewColor.filterTableViewBackgroundColor.value
        let label = UILabel(frame: CGRect(x: 15, y: 0, width: tableView.bounds.width - 30, height: 30))
        label.font = FilterTableViewFont.headerText.value
        label.textColor = FilterTableViewColor.headerText.value
        let customBorder = UIView(frame: CGRect(x: 16, y: view.frame.height - 1, width: view.frame.width - 32, height: 1))
        customBorder.backgroundColor = FilterTableViewColor.customBorder.value
        view.addSubview(customBorder)
        label.text = availableFilters?[section].title ?? ""
        view.addSubview(label)
        tableView.removeUnnecessaryHeaderTopPadding()
        return view
    }
    
    func tableView(_ tableView: UITableView, heightForFooterInSection section: Int) -> CGFloat {
        if section == 0 {
            return 40
        }
        return 0
    }
    
    func tableView(_ tableView: UITableView, viewForFooterInSection section: Int) -> UIView? {
        let view = UIView(frame: CGRect(x: 0, y: 0, width: tableView.bounds.width, height: 40))
        view.backgroundColor = FilterTableViewColor.filterTableViewBackgroundColor.value
        let button = UIButton(frame: CGRect(x: tableView.bounds.width - (tableView.bounds.width / 3), y: 0, width: tableView.bounds.width / 3, height: 30))
        let buttonShowLessAttrString = NSAttributedString(string: !showAllFilters ? localizedString("bl_show_more") : localizedString("bl_show_less"),
                                                        attributes: [NSAttributedString.Key.foregroundColor: FilterTableViewCellColor.titleSelected.value,
                                                                     NSAttributedString.Key.underlineStyle: NSUnderlineStyle.single.rawValue,
                                                                     NSAttributedString.Key.font: FilterTableViewCellFont.titleSelected.value])
        button.setAttributedTitle(buttonShowLessAttrString, for: .normal)
        button.addTarget(self, action: #selector(showMoreLess), for: .touchUpInside)
        view.addSubview(button)
        return view
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
		if let cell = view?.dequeueReusableCell(with: FilterTableViewCell.nibString(), for: indexPath) as? FilterTableViewCell,
			let availableFilters = availableFilters {
			let currentFilter = availableFilters[indexPath.section].filters[indexPath.row]
			cell.configureCell(with: currentFilter)
			return cell
		}
        assert(false, "Cell is not registered")
		return UITableViewCell()
    }
}
